/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '@angular/material/grid-list/grid-tile';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/linker/element_ref';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './grid-list.css';
import * as import12 from '@angular/core/src/linker/query_list';
var renderType_MdGridTile_Host = null;
var _View_MdGridTile_Host0 = (function (_super) {
    __extends(_View_MdGridTile_Host0, _super);
    function _View_MdGridTile_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdGridTile_Host0, renderType_MdGridTile_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdGridTile_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-grid-tile', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'role', 'listitem');
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdGridTile0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdGridTile_0_4 = new import3.MdGridTile(this.renderer, new import8.ElementRef(this._el_0));
        this._appEl_0.initComponent(this._MdGridTile_0_4, [], compView_0);
        compView_0.create(this._MdGridTile_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdGridTile_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.MdGridTile) && (0 === requestNodeIndex))) {
            return this._MdGridTile_0_4;
        }
        return notFoundResult;
    };
    return _View_MdGridTile_Host0;
}(import1.AppView));
function viewFactory_MdGridTile_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdGridTile_Host === null)) {
        (renderType_MdGridTile_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdGridTile_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdGridTileNgFactory = new import10.ComponentFactory('md-grid-tile', viewFactory_MdGridTile_Host0, import3.MdGridTile);
var styles_MdGridTile = [import11.styles];
var renderType_MdGridTile = null;
var _View_MdGridTile0 = (function (_super) {
    __extends(_View_MdGridTile0, _super);
    function _View_MdGridTile0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdGridTile0, renderType_MdGridTile, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdGridTile0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_1 = this.renderer.createElement(parentRenderNode, 'figure', null);
        this._text_2 = this.renderer.createText(this._el_1, '\n  ', null);
        this.renderer.projectNodes(this._el_1, import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_3 = this.renderer.createText(this._el_1, '\n', null);
        this.init([], [
            this._text_0,
            this._el_1,
            this._text_2,
            this._text_3
        ], [], []);
        return null;
    };
    return _View_MdGridTile0;
}(import1.AppView));
export function viewFactory_MdGridTile0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdGridTile === null)) {
        (renderType_MdGridTile = viewUtils.createRenderComponentType('', 1, import9.ViewEncapsulation.None, styles_MdGridTile, {}));
    }
    return new _View_MdGridTile0(viewUtils, parentInjector, declarationEl);
}
var renderType_MdGridTileText_Host = null;
var _View_MdGridTileText_Host0 = (function (_super) {
    __extends(_View_MdGridTileText_Host0, _super);
    function _View_MdGridTileText_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdGridTileText_Host0, renderType_MdGridTileText_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdGridTileText_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-grid-tile-header', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdGridTileText0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdGridTileText_0_4 = new import3.MdGridTileText(this.renderer, new import8.ElementRef(this._el_0));
        this._query_MdLine_0_0 = new import12.QueryList();
        this._appEl_0.initComponent(this._MdGridTileText_0_4, [], compView_0);
        compView_0.create(this._MdGridTileText_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdGridTileText_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.MdGridTileText) && (0 === requestNodeIndex))) {
            return this._MdGridTileText_0_4;
        }
        return notFoundResult;
    };
    _View_MdGridTileText_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdLine_0_0.dirty) {
                this._query_MdLine_0_0.reset([]);
                this._MdGridTileText_0_4._lines = this._query_MdLine_0_0;
                this._query_MdLine_0_0.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._MdGridTileText_0_4.ngAfterContentInit();
            }
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdGridTileText_Host0;
}(import1.AppView));
function viewFactory_MdGridTileText_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdGridTileText_Host === null)) {
        (renderType_MdGridTileText_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdGridTileText_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdGridTileTextNgFactory = new import10.ComponentFactory('md-grid-tile-header, md-grid-tile-footer', viewFactory_MdGridTileText_Host0, import3.MdGridTileText);
var styles_MdGridTileText = [];
var renderType_MdGridTileText = null;
var _View_MdGridTileText0 = (function (_super) {
    __extends(_View_MdGridTileText0, _super);
    function _View_MdGridTileText0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdGridTileText0, renderType_MdGridTileText, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdGridTileText0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.renderer.projectNodes(parentRenderNode, import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_1 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'class', 'md-grid-list-text');
        this.renderer.projectNodes(this._el_1, import4.flattenNestedViewRenderNodes(this.projectableNodes[1]));
        this._text_2 = this.renderer.createText(parentRenderNode, '\n', null);
        this.renderer.projectNodes(parentRenderNode, import4.flattenNestedViewRenderNodes(this.projectableNodes[2]));
        this.init([], [
            this._text_0,
            this._el_1,
            this._text_2
        ], [], []);
        return null;
    };
    return _View_MdGridTileText0;
}(import1.AppView));
export function viewFactory_MdGridTileText0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdGridTileText === null)) {
        (renderType_MdGridTileText = viewUtils.createRenderComponentType('', 3, import9.ViewEncapsulation.None, styles_MdGridTileText, {}));
    }
    return new _View_MdGridTileText0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/grid-list/grid-tile.ngfactory.js.map