/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/radio/radio';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/material/core/coordination/unique-selection-dispatcher';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from './radio.css';
var MdRadioModuleInjector = (function (_super) {
    __extends(MdRadioModuleInjector, _super);
    function MdRadioModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    MdRadioModuleInjector.prototype.createInternal = function () {
        this._MdRadioModule_0 = new import1.MdRadioModule();
        return this._MdRadioModule_0;
    };
    MdRadioModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.MdRadioModule)) {
            return this._MdRadioModule_0;
        }
        return notFoundResult;
    };
    MdRadioModuleInjector.prototype.destroyInternal = function () {
    };
    return MdRadioModuleInjector;
}(import0.NgModuleInjector));
export var MdRadioModuleNgFactory = new import0.NgModuleFactory(MdRadioModuleInjector, import1.MdRadioModule);
var renderType_MdRadioButton_Host = null;
var _View_MdRadioButton_Host0 = (function (_super) {
    __extends(_View_MdRadioButton_Host0, _super);
    function _View_MdRadioButton_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdRadioButton_Host0, renderType_MdRadioButton_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdRadioButton_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-radio-button', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdRadioButton0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdRadioButton_0_4 = new import1.MdRadioButton(this.parentInjector.get(import1.MdRadioGroup, null), this.parentInjector.get(import9.MdUniqueSelectionDispatcher));
        this._appEl_0.initComponent(this._MdRadioButton_0_4, [], compView_0);
        compView_0.create(this._MdRadioButton_0_4, this.projectableNodes, null);
        this._expr_0 = import8.UNINITIALIZED;
        this._expr_1 = import8.UNINITIALIZED;
        this._expr_2 = import8.UNINITIALIZED;
        this._expr_3 = import8.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdRadioButton_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdRadioButton) && (0 === requestNodeIndex))) {
            return this._MdRadioButton_0_4;
        }
        return notFoundResult;
    };
    _View_MdRadioButton_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (((this.numberOfChecks === 0) && !throwOnChange)) {
            this._MdRadioButton_0_4.ngOnInit();
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this._MdRadioButton_0_4._isFocused;
        if (import6.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_0, 'md-radio-focused', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this._MdRadioButton_0_4.id;
        if (import6.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementProperty(this._el_0, 'id', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this._MdRadioButton_0_4.checked;
        if (import6.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'md-radio-checked', currVal_2);
            this._expr_2 = currVal_2;
        }
        var currVal_3 = this._MdRadioButton_0_4.disabled;
        if (import6.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementClass(this._el_0, 'md-radio-disabled', currVal_3);
            this._expr_3 = currVal_3;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdRadioButton_Host0;
}(import4.AppView));
function viewFactory_MdRadioButton_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdRadioButton_Host === null)) {
        (renderType_MdRadioButton_Host = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdRadioButton_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdRadioButtonNgFactory = new import11.ComponentFactory('md-radio-button', viewFactory_MdRadioButton_Host0, import1.MdRadioButton);
var styles_MdRadioButton = [import12.styles];
var renderType_MdRadioButton = null;
var _View_MdRadioButton0 = (function (_super) {
    __extends(_View_MdRadioButton0, _super);
    function _View_MdRadioButton0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdRadioButton0, renderType_MdRadioButton, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdRadioButton0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_2 = this.renderer.createElement(parentRenderNode, 'label', null);
        this.renderer.setElementAttribute(this._el_2, 'class', 'md-radio-label');
        this._text_3 = this.renderer.createText(this._el_2, '\n  ', null);
        this._text_4 = this.renderer.createText(this._el_2, '\n  ', null);
        this._el_5 = this.renderer.createElement(this._el_2, 'div', null);
        this.renderer.setElementAttribute(this._el_5, 'class', 'md-radio-container');
        this._text_6 = this.renderer.createText(this._el_5, '\n    ', null);
        this._el_7 = this.renderer.createElement(this._el_5, 'div', null);
        this.renderer.setElementAttribute(this._el_7, 'class', 'md-radio-outer-circle');
        this._text_8 = this.renderer.createText(this._el_5, '\n    ', null);
        this._el_9 = this.renderer.createElement(this._el_5, 'div', null);
        this.renderer.setElementAttribute(this._el_9, 'class', 'md-radio-inner-circle');
        this._text_10 = this.renderer.createText(this._el_5, '\n    ', null);
        this._el_11 = this.renderer.createElement(this._el_5, 'div', null);
        this.renderer.setElementAttribute(this._el_11, 'class', 'md-ink-ripple');
        this._text_12 = this.renderer.createText(this._el_5, '\n  ', null);
        this._text_13 = this.renderer.createText(this._el_2, '\n\n  ', null);
        this._el_14 = this.renderer.createElement(this._el_2, 'input', null);
        this.renderer.setElementAttribute(this._el_14, 'class', 'md-radio-input md-visually-hidden');
        this.renderer.setElementAttribute(this._el_14, 'type', 'radio');
        this._text_15 = this.renderer.createText(this._el_2, '\n\n  ', null);
        this._text_16 = this.renderer.createText(this._el_2, '\n  ', null);
        this._el_17 = this.renderer.createElement(this._el_2, 'div', null);
        this.renderer.setElementAttribute(this._el_17, 'class', 'md-radio-label-content');
        this._text_18 = this.renderer.createText(this._el_17, '\n    ', null);
        this.renderer.projectNodes(this._el_17, import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_19 = this.renderer.createText(this._el_17, '\n  ', null);
        this._text_20 = this.renderer.createText(this._el_2, '\n', null);
        this._text_21 = this.renderer.createText(parentRenderNode, '\n', null);
        this._expr_0 = import8.UNINITIALIZED;
        this._expr_5 = import8.UNINITIALIZED;
        this._expr_6 = import8.UNINITIALIZED;
        this._expr_7 = import8.UNINITIALIZED;
        this._expr_8 = import8.UNINITIALIZED;
        this._expr_9 = import8.UNINITIALIZED;
        this._expr_10 = import8.UNINITIALIZED;
        var disposable_0 = this.renderer.listen(this._el_14, 'change', this.eventHandler(this._handle_change_14_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_14, 'focus', this.eventHandler(this._handle_focus_14_1.bind(this)));
        var disposable_2 = this.renderer.listen(this._el_14, 'blur', this.eventHandler(this._handle_blur_14_2.bind(this)));
        var disposable_3 = this.renderer.listen(this._el_14, 'click', this.eventHandler(this._handle_click_14_3.bind(this)));
        this._expr_11 = import8.UNINITIALIZED;
        this.init([], [
            this._text_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4,
            this._el_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._text_19,
            this._text_20,
            this._text_21
        ], [
            disposable_0,
            disposable_1,
            disposable_2,
            disposable_3
        ], []);
        return null;
    };
    _View_MdRadioButton0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this.context.inputId;
        if (import6.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementAttribute(this._el_2, 'for', ((currVal_0 == null) ? null : currVal_0.toString()));
            this._expr_0 = currVal_0;
        }
        var currVal_5 = this.context.inputId;
        if (import6.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementProperty(this._el_14, 'id', currVal_5);
            this._expr_5 = currVal_5;
        }
        var currVal_6 = this.context.checked;
        if (import6.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementProperty(this._el_14, 'checked', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = this.context.disabled;
        if (import6.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setElementProperty(this._el_14, 'disabled', currVal_7);
            this._expr_7 = currVal_7;
        }
        var currVal_8 = this.context.name;
        if (import6.checkBinding(throwOnChange, this._expr_8, currVal_8)) {
            this.renderer.setElementProperty(this._el_14, 'name', currVal_8);
            this._expr_8 = currVal_8;
        }
        var currVal_9 = this.context.ariaLabel;
        if (import6.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            this.renderer.setElementAttribute(this._el_14, 'aria-label', ((currVal_9 == null) ? null : currVal_9.toString()));
            this._expr_9 = currVal_9;
        }
        var currVal_10 = this.context.ariaLabelledby;
        if (import6.checkBinding(throwOnChange, this._expr_10, currVal_10)) {
            this.renderer.setElementAttribute(this._el_14, 'aria-labelledby', ((currVal_10 == null) ? null : currVal_10.toString()));
            this._expr_10 = currVal_10;
        }
        var currVal_11 = (this.context.align == 'end');
        if (import6.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementClass(this._el_17, 'md-radio-align-end', currVal_11);
            this._expr_11 = currVal_11;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdRadioButton0.prototype._handle_change_14_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputChange($event) !== false);
        return (true && pd_0);
    };
    _View_MdRadioButton0.prototype._handle_focus_14_1 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputFocus() !== false);
        return (true && pd_0);
    };
    _View_MdRadioButton0.prototype._handle_blur_14_2 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputBlur() !== false);
        return (true && pd_0);
    };
    _View_MdRadioButton0.prototype._handle_click_14_3 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputClick($event) !== false);
        return (true && pd_0);
    };
    return _View_MdRadioButton0;
}(import4.AppView));
export function viewFactory_MdRadioButton0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdRadioButton === null)) {
        (renderType_MdRadioButton = viewUtils.createRenderComponentType('', 1, import10.ViewEncapsulation.None, styles_MdRadioButton, {}));
    }
    return new _View_MdRadioButton0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/radio/radio.ngfactory.js.map