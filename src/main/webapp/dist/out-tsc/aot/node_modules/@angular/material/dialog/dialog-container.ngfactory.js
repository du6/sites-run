/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '@angular/material/dialog/dialog-container';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/zone/ng_zone';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './dialog-container.css';
import * as import12 from '@angular/core/src/linker/query_list';
import * as import13 from '@angular/material/core/a11y/focus-trap';
import * as import14 from '@angular/material/core/portal/portal-directives';
import * as import15 from '../core/a11y/focus-trap.ngfactory';
import * as import16 from '@angular/material/core/a11y/interactivity-checker';
import * as import17 from '@angular/core/src/linker/template_ref';
import * as import18 from '@angular/core/src/linker/component_factory_resolver';
var renderType_MdDialogContainer_Host = null;
var _View_MdDialogContainer_Host0 = (function (_super) {
    __extends(_View_MdDialogContainer_Host0, _super);
    function _View_MdDialogContainer_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdDialogContainer_Host0, renderType_MdDialogContainer_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdDialogContainer_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-dialog-container', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-dialog-container');
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdDialogContainer0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdDialogContainer_0_4 = new import3.MdDialogContainer(this.parentInjector.get(import8.NgZone));
        this._appEl_0.initComponent(this._MdDialogContainer_0_4, [], compView_0);
        compView_0.create(this._MdDialogContainer_0_4, this.projectableNodes, null);
        var disposable_0 = this.renderer.listen(this._el_0, 'keydown.escape', this.eventHandler(this._handle_keydown_escape_0_0.bind(this)));
        this._expr_1 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [disposable_0], []);
        return this._appEl_0;
    };
    _View_MdDialogContainer_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.MdDialogContainer) && (0 === requestNodeIndex))) {
            return this._MdDialogContainer_0_4;
        }
        return notFoundResult;
    };
    _View_MdDialogContainer_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_1 = ((this._MdDialogContainer_0_4.dialogConfig == null) ? null : this._MdDialogContainer_0_4.dialogConfig.role);
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementAttribute(this._el_0, 'role', ((currVal_1 == null) ? null : currVal_1.toString()));
            this._expr_1 = currVal_1;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdDialogContainer_Host0.prototype.destroyInternal = function () {
        this._MdDialogContainer_0_4.ngOnDestroy();
    };
    _View_MdDialogContainer_Host0.prototype._handle_keydown_escape_0_0 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdDialogContainer_0_4.handleEscapeKey() !== false);
        return (true && pd_0);
    };
    return _View_MdDialogContainer_Host0;
}(import1.AppView));
function viewFactory_MdDialogContainer_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdDialogContainer_Host === null)) {
        (renderType_MdDialogContainer_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdDialogContainer_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdDialogContainerNgFactory = new import10.ComponentFactory('md-dialog-container', viewFactory_MdDialogContainer_Host0, import3.MdDialogContainer);
var styles_MdDialogContainer = [import11.styles];
var renderType_MdDialogContainer = null;
var _View_MdDialogContainer0 = (function (_super) {
    __extends(_View_MdDialogContainer0, _super);
    function _View_MdDialogContainer0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdDialogContainer0, renderType_MdDialogContainer, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdDialogContainer0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._viewQuery_PortalHostDirective_0 = new import12.QueryList();
        this._viewQuery_FocusTrap_1 = new import12.QueryList();
        this._el_0 = this.renderer.createElement(parentRenderNode, 'focus-trap', null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = import15.viewFactory_FocusTrap0(this.viewUtils, this.injector(0), this._appEl_0);
        this._FocusTrap_0_4 = new import13.FocusTrap(this.parentInjector.get(import16.InteractivityChecker));
        this._appEl_0.initComponent(this._FocusTrap_0_4, [], compView_0);
        this._text_1 = this.renderer.createText(null, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(null, null);
        this._appEl_2 = new import2.AppElement(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new import17.TemplateRef_(this._appEl_2, viewFactory_MdDialogContainer1);
        this._PortalHostDirective_2_6 = new import14.PortalHostDirective(this.parentInjector.get(import18.ComponentFactoryResolver), this._appEl_2.vcRef);
        this._text_3 = this.renderer.createText(null, '\n', null);
        compView_0.create(this._FocusTrap_0_4, [[].concat([
                this._text_1,
                this._appEl_2,
                this._text_3
            ])], null);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this._expr_0 = import7.UNINITIALIZED;
        this._viewQuery_PortalHostDirective_0.reset([this._PortalHostDirective_2_6]);
        this.context._portalHost = this._viewQuery_PortalHostDirective_0.first;
        this._viewQuery_FocusTrap_1.reset([this._FocusTrap_0_4]);
        this.context._focusTrap = this._viewQuery_FocusTrap_1.first;
        this.init([], [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3,
            this._text_4
        ], [], []);
        return null;
    };
    _View_MdDialogContainer0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import14.PortalHostDirective) && (2 === requestNodeIndex))) {
            return this._PortalHostDirective_2_6;
        }
        if (((token === import13.FocusTrap) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._FocusTrap_0_4;
        }
        return notFoundResult;
    };
    _View_MdDialogContainer0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0 = '';
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this._PortalHostDirective_2_6.portal = currVal_0;
            this._expr_0 = currVal_0;
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdDialogContainer0;
}(import1.AppView));
export function viewFactory_MdDialogContainer0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdDialogContainer === null)) {
        (renderType_MdDialogContainer = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, styles_MdDialogContainer, {}));
    }
    return new _View_MdDialogContainer0(viewUtils, parentInjector, declarationEl);
}
var _View_MdDialogContainer1 = (function (_super) {
    __extends(_View_MdDialogContainer1, _super);
    function _View_MdDialogContainer1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdDialogContainer1, renderType_MdDialogContainer, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdDialogContainer1.prototype.createInternal = function (rootSelector) {
        this.init([], [], [], []);
        return null;
    };
    return _View_MdDialogContainer1;
}(import1.AppView));
function viewFactory_MdDialogContainer1(viewUtils, parentInjector, declarationEl) {
    return new _View_MdDialogContainer1(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/dialog/dialog-container.ngfactory.js.map