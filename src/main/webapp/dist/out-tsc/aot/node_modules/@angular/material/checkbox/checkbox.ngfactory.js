/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/checkbox/checkbox';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '@angular/forms/src/directives/control_value_accessor';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from './checkbox.css';
var MdCheckboxModuleInjector = (function (_super) {
    __extends(MdCheckboxModuleInjector, _super);
    function MdCheckboxModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    MdCheckboxModuleInjector.prototype.createInternal = function () {
        this._MdCheckboxModule_0 = new import1.MdCheckboxModule();
        return this._MdCheckboxModule_0;
    };
    MdCheckboxModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.MdCheckboxModule)) {
            return this._MdCheckboxModule_0;
        }
        return notFoundResult;
    };
    MdCheckboxModuleInjector.prototype.destroyInternal = function () {
    };
    return MdCheckboxModuleInjector;
}(import0.NgModuleInjector));
export var MdCheckboxModuleNgFactory = new import0.NgModuleFactory(MdCheckboxModuleInjector, import1.MdCheckboxModule);
var renderType_MdCheckbox_Host = null;
var _View_MdCheckbox_Host0 = (function (_super) {
    __extends(_View_MdCheckbox_Host0, _super);
    function _View_MdCheckbox_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCheckbox_Host0, renderType_MdCheckbox_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckAlways);
    }
    Object.defineProperty(_View_MdCheckbox_Host0.prototype, "_NG_VALUE_ACCESSOR_0_5", {
        get: function () {
            if ((this.__NG_VALUE_ACCESSOR_0_5 == null)) {
                (this.__NG_VALUE_ACCESSOR_0_5 = [this._MdCheckbox_0_4]);
            }
            return this.__NG_VALUE_ACCESSOR_0_5;
        },
        enumerable: true,
        configurable: true
    });
    _View_MdCheckbox_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-checkbox', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdCheckbox0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdCheckbox_0_4 = new import1.MdCheckbox(this.renderer, new import9.ElementRef(this._el_0));
        this._appEl_0.initComponent(this._MdCheckbox_0_4, [], compView_0);
        compView_0.create(this._MdCheckbox_0_4, this.projectableNodes, null);
        this._expr_0 = import8.UNINITIALIZED;
        this._expr_1 = import8.UNINITIALIZED;
        this._expr_2 = import8.UNINITIALIZED;
        this._expr_3 = import8.UNINITIALIZED;
        this._expr_4 = import8.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdCheckbox_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCheckbox) && (0 === requestNodeIndex))) {
            return this._MdCheckbox_0_4;
        }
        if (((token === import10.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_0_5;
        }
        return notFoundResult;
    };
    _View_MdCheckbox_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this._MdCheckbox_0_4.indeterminate;
        if (import6.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_0, 'md-checkbox-indeterminate', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this._MdCheckbox_0_4.checked;
        if (import6.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementClass(this._el_0, 'md-checkbox-checked', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this._MdCheckbox_0_4.disabled;
        if (import6.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'md-checkbox-disabled', currVal_2);
            this._expr_2 = currVal_2;
        }
        var currVal_3 = (this._MdCheckbox_0_4.align == 'end');
        if (import6.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementClass(this._el_0, 'md-checkbox-align-end', currVal_3);
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this._MdCheckbox_0_4.hasFocus;
        if (import6.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementClass(this._el_0, 'md-checkbox-focused', currVal_4);
            this._expr_4 = currVal_4;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdCheckbox_Host0;
}(import4.AppView));
function viewFactory_MdCheckbox_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCheckbox_Host === null)) {
        (renderType_MdCheckbox_Host = viewUtils.createRenderComponentType('', 0, import11.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdCheckbox_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdCheckboxNgFactory = new import12.ComponentFactory('md-checkbox', viewFactory_MdCheckbox_Host0, import1.MdCheckbox);
var styles_MdCheckbox = [import13.styles];
var renderType_MdCheckbox = null;
var _View_MdCheckbox0 = (function (_super) {
    __extends(_View_MdCheckbox0, _super);
    function _View_MdCheckbox0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCheckbox0, renderType_MdCheckbox, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckOnce);
    }
    _View_MdCheckbox0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'label', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-checkbox-layout');
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_2 = this.renderer.createElement(this._el_0, 'div', null);
        this.renderer.setElementAttribute(this._el_2, 'class', 'md-checkbox-inner-container');
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = this.renderer.createElement(this._el_2, 'input', null);
        this.renderer.setElementAttribute(this._el_4, 'class', 'md-checkbox-input md-visually-hidden');
        this.renderer.setElementAttribute(this._el_4, 'type', 'checkbox');
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_6 = this.renderer.createElement(this._el_2, 'div', null);
        this.renderer.setElementAttribute(this._el_6, 'class', 'md-ink-ripple');
        this._text_7 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_8 = this.renderer.createElement(this._el_2, 'div', null);
        this.renderer.setElementAttribute(this._el_8, 'class', 'md-checkbox-frame');
        this._text_9 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_10 = this.renderer.createElement(this._el_2, 'div', null);
        this.renderer.setElementAttribute(this._el_10, 'class', 'md-checkbox-background');
        this._text_11 = this.renderer.createText(this._el_10, '\n      ', null);
        this._el_12 = this.renderer.createElement(this._el_10, ':svg:svg', null);
        this.renderer.setElementAttribute(this._el_12, ':xml:space', 'preserve');
        this.renderer.setElementAttribute(this._el_12, 'class', 'md-checkbox-checkmark');
        this.renderer.setElementAttribute(this._el_12, 'version', '1.1');
        this.renderer.setElementAttribute(this._el_12, 'viewBox', '0 0 24 24');
        this.renderer.setElementAttribute(this._el_12, 'xmlns', 'http://www.w3.org/2000/svg');
        this._text_13 = this.renderer.createText(this._el_12, '\n        ', null);
        this._el_14 = this.renderer.createElement(this._el_12, ':svg:path', null);
        this.renderer.setElementAttribute(this._el_14, 'class', 'md-checkbox-checkmark-path');
        this.renderer.setElementAttribute(this._el_14, 'd', 'M4.1,12.7 9,17.6 20.3,6.3');
        this.renderer.setElementAttribute(this._el_14, 'fill', 'none');
        this.renderer.setElementAttribute(this._el_14, 'stroke', 'white');
        this._text_15 = this.renderer.createText(this._el_12, '\n      ', null);
        this._text_16 = this.renderer.createText(this._el_10, '\n      ', null);
        this._text_17 = this.renderer.createText(this._el_10, '\n      ', null);
        this._el_18 = this.renderer.createElement(this._el_10, 'div', null);
        this.renderer.setElementAttribute(this._el_18, 'class', 'md-checkbox-mixedmark');
        this._text_19 = this.renderer.createText(this._el_10, '\n    ', null);
        this._text_20 = this.renderer.createText(this._el_2, '\n  ', null);
        this._text_21 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_22 = this.renderer.createElement(this._el_0, 'span', null);
        this.renderer.setElementAttribute(this._el_22, 'class', 'md-checkbox-label');
        this._text_23 = this.renderer.createText(this._el_22, '\n    ', null);
        this.renderer.projectNodes(this._el_22, import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_24 = this.renderer.createText(this._el_22, '\n  ', null);
        this._text_25 = this.renderer.createText(this._el_0, '\n', null);
        this._text_26 = this.renderer.createText(parentRenderNode, '\n', null);
        this._expr_4 = import8.UNINITIALIZED;
        this._expr_5 = import8.UNINITIALIZED;
        this._expr_6 = import8.UNINITIALIZED;
        this._expr_7 = import8.UNINITIALIZED;
        this._expr_8 = import8.UNINITIALIZED;
        this._expr_9 = import8.UNINITIALIZED;
        this._expr_10 = import8.UNINITIALIZED;
        this._expr_11 = import8.UNINITIALIZED;
        this._expr_12 = import8.UNINITIALIZED;
        var disposable_0 = this.renderer.listen(this._el_4, 'focus', this.eventHandler(this._handle_focus_4_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_4, 'blur', this.eventHandler(this._handle_blur_4_1.bind(this)));
        var disposable_2 = this.renderer.listen(this._el_4, 'change', this.eventHandler(this._handle_change_4_2.bind(this)));
        var disposable_3 = this.renderer.listen(this._el_4, 'click', this.eventHandler(this._handle_click_4_3.bind(this)));
        this.init([], [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._text_17,
            this._el_18,
            this._text_19,
            this._text_20,
            this._text_21,
            this._el_22,
            this._text_23,
            this._text_24,
            this._text_25,
            this._text_26
        ], [
            disposable_0,
            disposable_1,
            disposable_2,
            disposable_3
        ], []);
        return null;
    };
    _View_MdCheckbox0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_4 = this.context.inputId;
        if (import6.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementProperty(this._el_4, 'id', currVal_4);
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this.context.required;
        if (import6.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementProperty(this._el_4, 'required', currVal_5);
            this._expr_5 = currVal_5;
        }
        var currVal_6 = this.context.checked;
        if (import6.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementProperty(this._el_4, 'checked', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = this.context.disabled;
        if (import6.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setElementProperty(this._el_4, 'disabled', currVal_7);
            this._expr_7 = currVal_7;
        }
        var currVal_8 = this.context.name;
        if (import6.checkBinding(throwOnChange, this._expr_8, currVal_8)) {
            this.renderer.setElementProperty(this._el_4, 'name', currVal_8);
            this._expr_8 = currVal_8;
        }
        var currVal_9 = this.context.tabindex;
        if (import6.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            this.renderer.setElementProperty(this._el_4, 'tabIndex', currVal_9);
            this._expr_9 = currVal_9;
        }
        var currVal_10 = this.context.indeterminate;
        if (import6.checkBinding(throwOnChange, this._expr_10, currVal_10)) {
            this.renderer.setElementProperty(this._el_4, 'indeterminate', currVal_10);
            this._expr_10 = currVal_10;
        }
        var currVal_11 = this.context.ariaLabel;
        if (import6.checkBinding(throwOnChange, this._expr_11, currVal_11)) {
            this.renderer.setElementAttribute(this._el_4, 'aria-label', ((currVal_11 == null) ? null : currVal_11.toString()));
            this._expr_11 = currVal_11;
        }
        var currVal_12 = this.context.ariaLabelledby;
        if (import6.checkBinding(throwOnChange, this._expr_12, currVal_12)) {
            this.renderer.setElementAttribute(this._el_4, 'aria-labelledby', ((currVal_12 == null) ? null : currVal_12.toString()));
            this._expr_12 = currVal_12;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdCheckbox0.prototype._handle_focus_4_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputFocus() !== false);
        return (true && pd_0);
    };
    _View_MdCheckbox0.prototype._handle_blur_4_1 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputBlur() !== false);
        return (true && pd_0);
    };
    _View_MdCheckbox0.prototype._handle_change_4_2 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInteractionEvent($event) !== false);
        return (true && pd_0);
    };
    _View_MdCheckbox0.prototype._handle_click_4_3 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputClick($event) !== false);
        return (true && pd_0);
    };
    return _View_MdCheckbox0;
}(import4.AppView));
export function viewFactory_MdCheckbox0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCheckbox === null)) {
        (renderType_MdCheckbox = viewUtils.createRenderComponentType('', 1, import11.ViewEncapsulation.None, styles_MdCheckbox, {}));
    }
    return new _View_MdCheckbox0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/checkbox/checkbox.ngfactory.js.map