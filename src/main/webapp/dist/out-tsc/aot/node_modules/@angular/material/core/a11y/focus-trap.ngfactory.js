/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '@angular/material/core/a11y/focus-trap';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/material/core/a11y/interactivity-checker';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/core/src/linker/query_list';
import * as import12 from '@angular/core/src/linker/element_ref';
var renderType_FocusTrap_Host = null;
var _View_FocusTrap_Host0 = (function (_super) {
    __extends(_View_FocusTrap_Host0, _super);
    function _View_FocusTrap_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_FocusTrap_Host0, renderType_FocusTrap_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_FocusTrap_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('focus-trap', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_FocusTrap0(this.viewUtils, this.injector(0), this._appEl_0);
        this._FocusTrap_0_4 = new import3.FocusTrap(this.parentInjector.get(import8.InteractivityChecker));
        this._appEl_0.initComponent(this._FocusTrap_0_4, [], compView_0);
        compView_0.create(this._FocusTrap_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_FocusTrap_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.FocusTrap) && (0 === requestNodeIndex))) {
            return this._FocusTrap_0_4;
        }
        return notFoundResult;
    };
    return _View_FocusTrap_Host0;
}(import1.AppView));
function viewFactory_FocusTrap_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_FocusTrap_Host === null)) {
        (renderType_FocusTrap_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_FocusTrap_Host0(viewUtils, parentInjector, declarationEl);
}
export var FocusTrapNgFactory = new import10.ComponentFactory('focus-trap', viewFactory_FocusTrap_Host0, import3.FocusTrap);
var styles_FocusTrap = [];
var renderType_FocusTrap = null;
var _View_FocusTrap0 = (function (_super) {
    __extends(_View_FocusTrap0, _super);
    function _View_FocusTrap0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_FocusTrap0, renderType_FocusTrap, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_FocusTrap0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._viewQuery_trappedContent_0 = new import11.QueryList();
        this._text_0 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._el_1 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'tabindex', '0');
        this._text_2 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._el_3 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.projectNodes(this._el_3, import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_4 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._el_5 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_5, 'tabindex', '0');
        var disposable_0 = this.renderer.listen(this._el_1, 'focus', this.eventHandler(this._handle_focus_1_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_5, 'focus', this.eventHandler(this._handle_focus_5_0.bind(this)));
        this._viewQuery_trappedContent_0.reset([new import12.ElementRef(this._el_3)]);
        this.context.trappedContent = this._viewQuery_trappedContent_0.first;
        this.init([], [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._el_5
        ], [
            disposable_0,
            disposable_1
        ], []);
        return null;
    };
    _View_FocusTrap0.prototype._handle_focus_1_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context.focusLastTabbableElement() !== false);
        return (true && pd_0);
    };
    _View_FocusTrap0.prototype._handle_focus_5_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context.focusFirstTabbableElement() !== false);
        return (true && pd_0);
    };
    return _View_FocusTrap0;
}(import1.AppView));
export function viewFactory_FocusTrap0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_FocusTrap === null)) {
        (renderType_FocusTrap = viewUtils.createRenderComponentType('', 1, import9.ViewEncapsulation.None, styles_FocusTrap, {}));
    }
    return new _View_FocusTrap0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/core/a11y/focus-trap.ngfactory.js.map