/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/icon/icon';
import * as import2 from '@angular/http/src/http_module';
import * as import3 from '@angular/http/src/backends/browser_xhr';
import * as import4 from '@angular/http/src/base_response_options';
import * as import5 from '@angular/http/src/backends/xhr_backend';
import * as import6 from '@angular/http/src/base_request_options';
import * as import8 from '@angular/http/src/interfaces';
import * as import9 from '@angular/http/src/http';
import * as import11 from '@angular/core/src/linker/view';
import * as import12 from '@angular/core/src/linker/element';
import * as import13 from '@angular/core/src/linker/view_utils';
import * as import14 from '@angular/core/src/linker/view_type';
import * as import15 from '@angular/core/src/change_detection/change_detection';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from '@angular/material/icon/icon-registry';
import * as import18 from '@angular/core/src/metadata/view';
import * as import19 from '@angular/core/src/linker/component_factory';
import * as import20 from './icon.css';
var MdIconModuleInjector = (function (_super) {
    __extends(MdIconModuleInjector, _super);
    function MdIconModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(MdIconModuleInjector.prototype, "_BrowserXhr_2", {
        get: function () {
            if ((this.__BrowserXhr_2 == null)) {
                (this.__BrowserXhr_2 = new import3.BrowserXhr());
            }
            return this.__BrowserXhr_2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_ResponseOptions_3", {
        get: function () {
            if ((this.__ResponseOptions_3 == null)) {
                (this.__ResponseOptions_3 = new import4.BaseResponseOptions());
            }
            return this.__ResponseOptions_3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_XSRFStrategy_4", {
        get: function () {
            if ((this.__XSRFStrategy_4 == null)) {
                (this.__XSRFStrategy_4 = import2._createDefaultCookieXSRFStrategy());
            }
            return this.__XSRFStrategy_4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_XHRBackend_5", {
        get: function () {
            if ((this.__XHRBackend_5 == null)) {
                (this.__XHRBackend_5 = new import5.XHRBackend(this._BrowserXhr_2, this._ResponseOptions_3, this._XSRFStrategy_4));
            }
            return this.__XHRBackend_5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_RequestOptions_6", {
        get: function () {
            if ((this.__RequestOptions_6 == null)) {
                (this.__RequestOptions_6 = new import6.BaseRequestOptions());
            }
            return this.__RequestOptions_6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdIconModuleInjector.prototype, "_Http_7", {
        get: function () {
            if ((this.__Http_7 == null)) {
                (this.__Http_7 = import2.httpFactory(this._XHRBackend_5, this._RequestOptions_6));
            }
            return this.__Http_7;
        },
        enumerable: true,
        configurable: true
    });
    MdIconModuleInjector.prototype.createInternal = function () {
        this._HttpModule_0 = new import2.HttpModule();
        this._MdIconModule_1 = new import1.MdIconModule();
        return this._MdIconModule_1;
    };
    MdIconModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.HttpModule)) {
            return this._HttpModule_0;
        }
        if ((token === import1.MdIconModule)) {
            return this._MdIconModule_1;
        }
        if ((token === import3.BrowserXhr)) {
            return this._BrowserXhr_2;
        }
        if ((token === import4.ResponseOptions)) {
            return this._ResponseOptions_3;
        }
        if ((token === import8.XSRFStrategy)) {
            return this._XSRFStrategy_4;
        }
        if ((token === import5.XHRBackend)) {
            return this._XHRBackend_5;
        }
        if ((token === import6.RequestOptions)) {
            return this._RequestOptions_6;
        }
        if ((token === import9.Http)) {
            return this._Http_7;
        }
        return notFoundResult;
    };
    MdIconModuleInjector.prototype.destroyInternal = function () {
    };
    return MdIconModuleInjector;
}(import0.NgModuleInjector));
export var MdIconModuleNgFactory = new import0.NgModuleFactory(MdIconModuleInjector, import1.MdIconModule);
var renderType_MdIcon_Host = null;
var _View_MdIcon_Host0 = (function (_super) {
    __extends(_View_MdIcon_Host0, _super);
    function _View_MdIcon_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdIcon_Host0, renderType_MdIcon_Host, import14.ViewType.HOST, viewUtils, parentInjector, declarationEl, import15.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdIcon_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-icon', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'role', 'img');
        this._appEl_0 = new import12.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdIcon0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdIcon_0_4 = new import1.MdIcon(new import16.ElementRef(this._el_0), this.renderer, this.parentInjector.get(import17.MdIconRegistry));
        this._appEl_0.initComponent(this._MdIcon_0_4, [], compView_0);
        compView_0.create(this._MdIcon_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdIcon_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdIcon) && (0 === requestNodeIndex))) {
            return this._MdIcon_0_4;
        }
        return notFoundResult;
    };
    _View_MdIcon_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (((this.numberOfChecks === 0) && !throwOnChange)) {
            this._MdIcon_0_4.ngOnInit();
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            this._MdIcon_0_4.ngAfterViewChecked();
        }
    };
    return _View_MdIcon_Host0;
}(import11.AppView));
function viewFactory_MdIcon_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdIcon_Host === null)) {
        (renderType_MdIcon_Host = viewUtils.createRenderComponentType('', 0, import18.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdIcon_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdIconNgFactory = new import19.ComponentFactory('md-icon', viewFactory_MdIcon_Host0, import1.MdIcon);
var styles_MdIcon = [import20.styles];
var renderType_MdIcon = null;
var _View_MdIcon0 = (function (_super) {
    __extends(_View_MdIcon0, _super);
    function _View_MdIcon0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdIcon0, renderType_MdIcon, import14.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import15.ChangeDetectorStatus.CheckOnce);
    }
    _View_MdIcon0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.renderer.projectNodes(parentRenderNode, import13.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this.init([], [], [], []);
        return null;
    };
    return _View_MdIcon0;
}(import11.AppView));
export function viewFactory_MdIcon0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdIcon === null)) {
        (renderType_MdIcon = viewUtils.createRenderComponentType('', 1, import18.ViewEncapsulation.None, styles_MdIcon, {}));
    }
    return new _View_MdIcon0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/icon/icon.ngfactory.js.map