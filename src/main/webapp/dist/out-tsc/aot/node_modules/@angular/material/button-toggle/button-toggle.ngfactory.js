/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button-toggle/button-toggle';
import * as import2 from '@angular/forms/src/directives';
import * as import3 from '@angular/forms/src/form_providers';
import * as import4 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/element';
import * as import9 from '@angular/core/src/linker/view_utils';
import * as import10 from '@angular/core/src/linker/view_type';
import * as import11 from '@angular/core/src/change_detection/change_detection';
import * as import12 from '@angular/material/core/coordination/unique-selection-dispatcher';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from './button-toggle.css';
var MdButtonToggleModuleInjector = (function (_super) {
    __extends(MdButtonToggleModuleInjector, _super);
    function MdButtonToggleModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(MdButtonToggleModuleInjector.prototype, "_RadioControlRegistry_3", {
        get: function () {
            if ((this.__RadioControlRegistry_3 == null)) {
                (this.__RadioControlRegistry_3 = new import4.RadioControlRegistry());
            }
            return this.__RadioControlRegistry_3;
        },
        enumerable: true,
        configurable: true
    });
    MdButtonToggleModuleInjector.prototype.createInternal = function () {
        this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();
        this._FormsModule_1 = new import3.FormsModule();
        this._MdButtonToggleModule_2 = new import1.MdButtonToggleModule();
        return this._MdButtonToggleModule_2;
    };
    MdButtonToggleModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.InternalFormsSharedModule)) {
            return this._InternalFormsSharedModule_0;
        }
        if ((token === import3.FormsModule)) {
            return this._FormsModule_1;
        }
        if ((token === import1.MdButtonToggleModule)) {
            return this._MdButtonToggleModule_2;
        }
        if ((token === import4.RadioControlRegistry)) {
            return this._RadioControlRegistry_3;
        }
        return notFoundResult;
    };
    MdButtonToggleModuleInjector.prototype.destroyInternal = function () {
    };
    return MdButtonToggleModuleInjector;
}(import0.NgModuleInjector));
export var MdButtonToggleModuleNgFactory = new import0.NgModuleFactory(MdButtonToggleModuleInjector, import1.MdButtonToggleModule);
var renderType_MdButtonToggle_Host = null;
var _View_MdButtonToggle_Host0 = (function (_super) {
    __extends(_View_MdButtonToggle_Host0, _super);
    function _View_MdButtonToggle_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdButtonToggle_Host0, renderType_MdButtonToggle_Host, import10.ViewType.HOST, viewUtils, parentInjector, declarationEl, import11.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdButtonToggle_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-button-toggle', rootSelector, null);
        this._appEl_0 = new import8.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdButtonToggle0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdButtonToggle_0_4 = new import1.MdButtonToggle(this.parentInjector.get(import1.MdButtonToggleGroup, null), this.parentInjector.get(import1.MdButtonToggleGroupMultiple, null), this.parentInjector.get(import12.MdUniqueSelectionDispatcher));
        this._appEl_0.initComponent(this._MdButtonToggle_0_4, [], compView_0);
        compView_0.create(this._MdButtonToggle_0_4, this.projectableNodes, null);
        this._expr_0 = import11.UNINITIALIZED;
        this._expr_1 = import11.UNINITIALIZED;
        this._expr_2 = import11.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdButtonToggle_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdButtonToggle) && (0 === requestNodeIndex))) {
            return this._MdButtonToggle_0_4;
        }
        return notFoundResult;
    };
    _View_MdButtonToggle_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (((this.numberOfChecks === 0) && !throwOnChange)) {
            this._MdButtonToggle_0_4.ngOnInit();
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this._MdButtonToggle_0_4.id;
        if (import9.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementProperty(this._el_0, 'id', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this._MdButtonToggle_0_4.checked;
        if (import9.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementClass(this._el_0, 'md-button-toggle-checked', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this._MdButtonToggle_0_4.disabled;
        if (import9.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementClass(this._el_0, 'md-button-toggle-disabled', currVal_2);
            this._expr_2 = currVal_2;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdButtonToggle_Host0;
}(import7.AppView));
function viewFactory_MdButtonToggle_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdButtonToggle_Host === null)) {
        (renderType_MdButtonToggle_Host = viewUtils.createRenderComponentType('', 0, import13.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdButtonToggle_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdButtonToggleNgFactory = new import14.ComponentFactory('md-button-toggle', viewFactory_MdButtonToggle_Host0, import1.MdButtonToggle);
var styles_MdButtonToggle = [import15.styles];
var renderType_MdButtonToggle = null;
var _View_MdButtonToggle0 = (function (_super) {
    __extends(_View_MdButtonToggle0, _super);
    function _View_MdButtonToggle0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdButtonToggle0, renderType_MdButtonToggle, import10.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import11.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdButtonToggle0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'label', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-button-toggle-label');
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this._el_2 = this.renderer.createElement(this._el_0, 'input', null);
        this.renderer.setElementAttribute(this._el_2, 'class', 'md-button-toggle-input md-visually-hidden');
        this._text_3 = this.renderer.createText(this._el_0, '\n\n  ', null);
        this._el_4 = this.renderer.createElement(this._el_0, 'div', null);
        this.renderer.setElementAttribute(this._el_4, 'class', 'md-button-toggle-label-content');
        this._text_5 = this.renderer.createText(this._el_4, '\n    ', null);
        this.renderer.projectNodes(this._el_4, import9.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_6 = this.renderer.createText(this._el_4, '\n  ', null);
        this._text_7 = this.renderer.createText(this._el_0, '\n', null);
        this._text_8 = this.renderer.createText(parentRenderNode, '\n', null);
        this._expr_0 = import11.UNINITIALIZED;
        this._expr_3 = import11.UNINITIALIZED;
        this._expr_4 = import11.UNINITIALIZED;
        this._expr_5 = import11.UNINITIALIZED;
        this._expr_6 = import11.UNINITIALIZED;
        this._expr_7 = import11.UNINITIALIZED;
        var disposable_0 = this.renderer.listen(this._el_2, 'change', this.eventHandler(this._handle_change_2_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_2, 'click', this.eventHandler(this._handle_click_2_1.bind(this)));
        this.init([], [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._text_7,
            this._text_8
        ], [
            disposable_0,
            disposable_1
        ], []);
        return null;
    };
    _View_MdButtonToggle0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this.context.inputId;
        if (import9.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementAttribute(this._el_0, 'for', ((currVal_0 == null) ? null : currVal_0.toString()));
            this._expr_0 = currVal_0;
        }
        var currVal_3 = this.context._type;
        if (import9.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementProperty(this._el_2, 'type', currVal_3);
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this.context.inputId;
        if (import9.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementProperty(this._el_2, 'id', currVal_4);
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this.context.checked;
        if (import9.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementProperty(this._el_2, 'checked', currVal_5);
            this._expr_5 = currVal_5;
        }
        var currVal_6 = this.context.disabled;
        if (import9.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementProperty(this._el_2, 'disabled', currVal_6);
            this._expr_6 = currVal_6;
        }
        var currVal_7 = this.context.name;
        if (import9.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setElementProperty(this._el_2, 'name', currVal_7);
            this._expr_7 = currVal_7;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdButtonToggle0.prototype._handle_change_2_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputChange($event) !== false);
        return (true && pd_0);
    };
    _View_MdButtonToggle0.prototype._handle_click_2_1 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context._onInputClick($event) !== false);
        return (true && pd_0);
    };
    return _View_MdButtonToggle0;
}(import7.AppView));
export function viewFactory_MdButtonToggle0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdButtonToggle === null)) {
        (renderType_MdButtonToggle = viewUtils.createRenderComponentType('', 1, import13.ViewEncapsulation.None, styles_MdButtonToggle, {}));
    }
    return new _View_MdButtonToggle0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/button-toggle/button-toggle.ngfactory.js.map