/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/grid-list/grid-list';
import * as import2 from '@angular/material/core/line/line';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/element';
import * as import7 from '@angular/core/src/linker/query_list';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/change_detection/change_detection';
import * as import11 from '@angular/core/src/linker/element_ref';
import * as import12 from '@angular/material/core/rtl/dir';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from './grid-list.css';
var MdGridListModuleInjector = (function (_super) {
    __extends(MdGridListModuleInjector, _super);
    function MdGridListModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    MdGridListModuleInjector.prototype.createInternal = function () {
        this._MdLineModule_0 = new import2.MdLineModule();
        this._MdGridListModule_1 = new import1.MdGridListModule();
        return this._MdGridListModule_1;
    };
    MdGridListModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.MdLineModule)) {
            return this._MdLineModule_0;
        }
        if ((token === import1.MdGridListModule)) {
            return this._MdGridListModule_1;
        }
        return notFoundResult;
    };
    MdGridListModuleInjector.prototype.destroyInternal = function () {
    };
    return MdGridListModuleInjector;
}(import0.NgModuleInjector));
export var MdGridListModuleNgFactory = new import0.NgModuleFactory(MdGridListModuleInjector, import1.MdGridListModule);
var renderType_MdGridList_Host = null;
var _View_MdGridList_Host0 = (function (_super) {
    __extends(_View_MdGridList_Host0, _super);
    function _View_MdGridList_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdGridList_Host0, renderType_MdGridList_Host, import9.ViewType.HOST, viewUtils, parentInjector, declarationEl, import10.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdGridList_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-grid-list', rootSelector, null);
        this._appEl_0 = new import6.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdGridList0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdGridList_0_4 = new import1.MdGridList(this.renderer, new import11.ElementRef(this._el_0), this.parentInjector.get(import12.Dir, null));
        this._query_MdGridTile_0_0 = new import7.QueryList();
        this._appEl_0.initComponent(this._MdGridList_0_4, [], compView_0);
        compView_0.create(this._MdGridList_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdGridList_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdGridList) && (0 === requestNodeIndex))) {
            return this._MdGridList_0_4;
        }
        return notFoundResult;
    };
    _View_MdGridList_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        if (((this.numberOfChecks === 0) && !throwOnChange)) {
            this._MdGridList_0_4.ngOnInit();
        }
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdGridTile_0_0.dirty) {
                this._query_MdGridTile_0_0.reset([]);
                this._MdGridList_0_4._tiles = this._query_MdGridTile_0_0;
                this._query_MdGridTile_0_0.notifyOnChanges();
            }
            this._MdGridList_0_4.ngAfterContentChecked();
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdGridList_Host0;
}(import5.AppView));
function viewFactory_MdGridList_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdGridList_Host === null)) {
        (renderType_MdGridList_Host = viewUtils.createRenderComponentType('', 0, import13.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdGridList_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdGridListNgFactory = new import14.ComponentFactory('md-grid-list', viewFactory_MdGridList_Host0, import1.MdGridList);
var styles_MdGridList = [import15.styles];
var renderType_MdGridList = null;
var _View_MdGridList0 = (function (_super) {
    __extends(_View_MdGridList0, _super);
    function _View_MdGridList0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdGridList0, renderType_MdGridList, import9.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import10.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdGridList0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-grid-list');
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this.renderer.projectNodes(this._el_0, import8.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_2 = this.renderer.createText(this._el_0, '\n', null);
        this.init([], [
            this._el_0,
            this._text_1,
            this._text_2
        ], [], []);
        return null;
    };
    return _View_MdGridList0;
}(import5.AppView));
export function viewFactory_MdGridList0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdGridList === null)) {
        (renderType_MdGridList = viewUtils.createRenderComponentType('', 1, import13.ViewEncapsulation.None, styles_MdGridList, {}));
    }
    return new _View_MdGridList0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/grid-list/grid-list.ngfactory.js.map