/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button/button';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/ripple/ripple';
import * as import4 from '@angular/common/src/localization';
import * as import6 from '@angular/core/src/i18n/tokens';
import * as import8 from '@angular/core/src/linker/view';
import * as import9 from '@angular/core/src/linker/element';
import * as import10 from '@angular/core/src/linker/view_utils';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/change_detection/change_detection';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/core/src/metadata/view';
import * as import15 from '@angular/core/src/linker/component_factory';
import * as import16 from './button.css';
import * as import17 from '@angular/common/src/directives/ng_if';
import * as import18 from '@angular/core/src/linker/template_ref';
var MdButtonModuleInjector = (function (_super) {
    __extends(MdButtonModuleInjector, _super);
    function MdButtonModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(MdButtonModuleInjector.prototype, "_NgLocalization_3", {
        get: function () {
            if ((this.__NgLocalization_3 == null)) {
                (this.__NgLocalization_3 = new import4.NgLocaleLocalization(this.parent.get(import6.LOCALE_ID)));
            }
            return this.__NgLocalization_3;
        },
        enumerable: true,
        configurable: true
    });
    MdButtonModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import2.CommonModule();
        this._MdRippleModule_1 = new import3.MdRippleModule();
        this._MdButtonModule_2 = new import1.MdButtonModule();
        return this._MdButtonModule_2;
    };
    MdButtonModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.MdRippleModule)) {
            return this._MdRippleModule_1;
        }
        if ((token === import1.MdButtonModule)) {
            return this._MdButtonModule_2;
        }
        if ((token === import4.NgLocalization)) {
            return this._NgLocalization_3;
        }
        return notFoundResult;
    };
    MdButtonModuleInjector.prototype.destroyInternal = function () {
    };
    return MdButtonModuleInjector;
}(import0.NgModuleInjector));
export var MdButtonModuleNgFactory = new import0.NgModuleFactory(MdButtonModuleInjector, import1.MdButtonModule);
var renderType_MdButton_Host = null;
var _View_MdButton_Host0 = (function (_super) {
    __extends(_View_MdButton_Host0, _super);
    function _View_MdButton_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdButton_Host0, renderType_MdButton_Host, import11.ViewType.HOST, viewUtils, parentInjector, declarationEl, import12.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdButton_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('button', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'md-button', '');
        this._appEl_0 = new import9.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdButton0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdButton_0_4 = new import1.MdButton(new import13.ElementRef(this._el_0), this.renderer);
        this._appEl_0.initComponent(this._MdButton_0_4, [], compView_0);
        compView_0.create(this._MdButton_0_4, this.projectableNodes, null);
        var disposable_0 = this.renderer.listen(this._el_0, 'mousedown', this.eventHandler(this._handle_mousedown_0_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_0, 'focus', this.eventHandler(this._handle_focus_0_1.bind(this)));
        var disposable_2 = this.renderer.listen(this._el_0, 'blur', this.eventHandler(this._handle_blur_0_2.bind(this)));
        this._expr_3 = import12.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [
            disposable_0,
            disposable_1,
            disposable_2
        ], []);
        return this._appEl_0;
    };
    _View_MdButton_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdButton) && (0 === requestNodeIndex))) {
            return this._MdButton_0_4;
        }
        return notFoundResult;
    };
    _View_MdButton_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_3 = this._MdButton_0_4._isKeyboardFocused;
        if (import10.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementClass(this._el_0, 'md-button-focus', currVal_3);
            this._expr_3 = currVal_3;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdButton_Host0.prototype._handle_mousedown_0_0 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdButton_0_4._setMousedown() !== false);
        return (true && pd_0);
    };
    _View_MdButton_Host0.prototype._handle_focus_0_1 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdButton_0_4._setKeyboardFocus() !== false);
        return (true && pd_0);
    };
    _View_MdButton_Host0.prototype._handle_blur_0_2 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdButton_0_4._removeKeyboardFocus() !== false);
        return (true && pd_0);
    };
    return _View_MdButton_Host0;
}(import8.AppView));
function viewFactory_MdButton_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdButton_Host === null)) {
        (renderType_MdButton_Host = viewUtils.createRenderComponentType('', 0, import14.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdButton_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdButtonNgFactory = new import15.ComponentFactory('button[md-button], button[md-raised-button], button[md-icon-button], button[md-fab], button[md-mini-fab]', viewFactory_MdButton_Host0, import1.MdButton);
var styles_MdButton = [import16.styles];
var renderType_MdButton = null;
var _View_MdButton0 = (function (_super) {
    __extends(_View_MdButton0, _super);
    function _View_MdButton0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdButton0, renderType_MdButton, import11.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import12.ChangeDetectorStatus.CheckOnce);
    }
    _View_MdButton0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'span', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-button-wrapper');
        this.renderer.projectNodes(this._el_0, import10.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_1 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._appEl_2 = new import9.AppElement(2, null, this, this._anchor_2);
        this._TemplateRef_2_5 = new import18.TemplateRef_(this._appEl_2, viewFactory_MdButton1);
        this._NgIf_2_6 = new import17.NgIf(this._appEl_2.vcRef, this._TemplateRef_2_5);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n', null);
        this._expr_0 = import12.UNINITIALIZED;
        this.init([], [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [], []);
        return null;
    };
    _View_MdButton0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import17.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6;
        }
        return notFoundResult;
    };
    _View_MdButton0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0 = this.context.isRippleEnabled();
        if (import10.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this._NgIf_2_6.ngIf = currVal_0;
            this._expr_0 = currVal_0;
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdButton0;
}(import8.AppView));
export function viewFactory_MdButton0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdButton === null)) {
        (renderType_MdButton = viewUtils.createRenderComponentType('', 1, import14.ViewEncapsulation.None, styles_MdButton, {}));
    }
    return new _View_MdButton0(viewUtils, parentInjector, declarationEl);
}
var _View_MdButton1 = (function (_super) {
    __extends(_View_MdButton1, _super);
    function _View_MdButton1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdButton1, renderType_MdButton, import11.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import12.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdButton1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-button-ripple');
        this.renderer.setElementAttribute(this._el_0, 'md-ripple', '');
        this.renderer.setElementAttribute(this._el_0, 'md-ripple-background-color', 'rgba(0, 0, 0, 0)');
        this._MdRipple_0_3 = new import3.MdRipple(new import13.ElementRef(this._el_0));
        this._expr_0 = import12.UNINITIALIZED;
        this._expr_1 = import12.UNINITIALIZED;
        this._expr_2 = import12.UNINITIALIZED;
        this._expr_3 = import12.UNINITIALIZED;
        this._expr_4 = import12.UNINITIALIZED;
        this._expr_5 = import12.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return null;
    };
    _View_MdButton1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.MdRipple) && (0 === requestNodeIndex))) {
            return this._MdRipple_0_3;
        }
        return notFoundResult;
    };
    _View_MdButton1.prototype.detectChangesInternal = function (throwOnChange) {
        var changes = null;
        changes = null;
        var currVal_1 = this.parent.context.getHostElement();
        if (import10.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this._MdRipple_0_3.trigger = currVal_1;
            if ((changes === null)) {
                (changes = {});
            }
            changes['trigger'] = new import12.SimpleChange(this._expr_1, currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = (this.parent.context.isRoundButton() ? 'rgba(255, 255, 255, 0.2)' : '');
        if (import10.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this._MdRipple_0_3.color = currVal_2;
            if ((changes === null)) {
                (changes = {});
            }
            changes['color'] = new import12.SimpleChange(this._expr_2, currVal_2);
            this._expr_2 = currVal_2;
        }
        var currVal_3 = 'rgba(0, 0, 0, 0)';
        if (import10.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this._MdRipple_0_3.backgroundColor = currVal_3;
            if ((changes === null)) {
                (changes = {});
            }
            changes['backgroundColor'] = new import12.SimpleChange(this._expr_3, currVal_3);
            this._expr_3 = currVal_3;
        }
        if ((changes !== null)) {
            this._MdRipple_0_3.ngOnChanges(changes);
        }
        if (((this.numberOfChecks === 0) && !throwOnChange)) {
            this._MdRipple_0_3.ngOnInit();
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this.parent.context.isRoundButton();
        if (import10.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_0, 'md-button-ripple-round', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_4 = this._MdRipple_0_3.focused;
        if (import10.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementClass(this._el_0, 'md-ripple-focused', currVal_4);
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this._MdRipple_0_3.unbounded;
        if (import10.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementClass(this._el_0, 'md-ripple-unbounded', currVal_5);
            this._expr_5 = currVal_5;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdButton1.prototype.destroyInternal = function () {
        this._MdRipple_0_3.ngOnDestroy();
    };
    return _View_MdButton1;
}(import8.AppView));
function viewFactory_MdButton1(viewUtils, parentInjector, declarationEl) {
    return new _View_MdButton1(viewUtils, parentInjector, declarationEl);
}
var renderType_MdAnchor_Host = null;
var _View_MdAnchor_Host0 = (function (_super) {
    __extends(_View_MdAnchor_Host0, _super);
    function _View_MdAnchor_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdAnchor_Host0, renderType_MdAnchor_Host, import11.ViewType.HOST, viewUtils, parentInjector, declarationEl, import12.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdAnchor_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('a', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'md-button', '');
        this._appEl_0 = new import9.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdAnchor0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdAnchor_0_4 = new import1.MdAnchor(new import13.ElementRef(this._el_0), this.renderer);
        this._appEl_0.initComponent(this._MdAnchor_0_4, [], compView_0);
        compView_0.create(this._MdAnchor_0_4, this.projectableNodes, null);
        var disposable_0 = this.renderer.listen(this._el_0, 'mousedown', this.eventHandler(this._handle_mousedown_0_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_0, 'focus', this.eventHandler(this._handle_focus_0_1.bind(this)));
        var disposable_2 = this.renderer.listen(this._el_0, 'blur', this.eventHandler(this._handle_blur_0_2.bind(this)));
        var disposable_3 = this.renderer.listen(this._el_0, 'click', this.eventHandler(this._handle_click_0_3.bind(this)));
        this._expr_4 = import12.UNINITIALIZED;
        this._expr_5 = import12.UNINITIALIZED;
        this._expr_6 = import12.UNINITIALIZED;
        this._expr_7 = import12.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [
            disposable_0,
            disposable_1,
            disposable_2,
            disposable_3
        ], []);
        return this._appEl_0;
    };
    _View_MdAnchor_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdAnchor) && (0 === requestNodeIndex))) {
            return this._MdAnchor_0_4;
        }
        return notFoundResult;
    };
    _View_MdAnchor_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_4 = this._MdAnchor_0_4._isKeyboardFocused;
        if (import10.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementClass(this._el_0, 'md-button-focus', currVal_4);
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this._MdAnchor_0_4.tabIndex;
        if (import10.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementProperty(this._el_0, 'tabIndex', currVal_5);
            this._expr_5 = currVal_5;
        }
        var currVal_6 = this._MdAnchor_0_4.isAriaDisabled;
        if (import10.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementAttribute(this._el_0, 'aria-disabled', ((currVal_6 == null) ? null : currVal_6.toString()));
            this._expr_6 = currVal_6;
        }
        var currVal_7 = this._MdAnchor_0_4.disabled;
        if (import10.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setElementAttribute(this._el_0, 'disabled', ((currVal_7 == null) ? null : currVal_7.toString()));
            this._expr_7 = currVal_7;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdAnchor_Host0.prototype._handle_mousedown_0_0 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdAnchor_0_4._setMousedown() !== false);
        return (true && pd_0);
    };
    _View_MdAnchor_Host0.prototype._handle_focus_0_1 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdAnchor_0_4._setKeyboardFocus() !== false);
        return (true && pd_0);
    };
    _View_MdAnchor_Host0.prototype._handle_blur_0_2 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdAnchor_0_4._removeKeyboardFocus() !== false);
        return (true && pd_0);
    };
    _View_MdAnchor_Host0.prototype._handle_click_0_3 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._MdAnchor_0_4._haltDisabledEvents($event) !== false);
        return (true && pd_0);
    };
    return _View_MdAnchor_Host0;
}(import8.AppView));
function viewFactory_MdAnchor_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdAnchor_Host === null)) {
        (renderType_MdAnchor_Host = viewUtils.createRenderComponentType('', 0, import14.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdAnchor_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdAnchorNgFactory = new import15.ComponentFactory('a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]', viewFactory_MdAnchor_Host0, import1.MdAnchor);
var styles_MdAnchor = [import16.styles];
var renderType_MdAnchor = null;
var _View_MdAnchor0 = (function (_super) {
    __extends(_View_MdAnchor0, _super);
    function _View_MdAnchor0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdAnchor0, renderType_MdAnchor, import11.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import12.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdAnchor0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'span', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-button-wrapper');
        this.renderer.projectNodes(this._el_0, import10.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_1 = this.renderer.createText(parentRenderNode, '\n', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._appEl_2 = new import9.AppElement(2, null, this, this._anchor_2);
        this._TemplateRef_2_5 = new import18.TemplateRef_(this._appEl_2, viewFactory_MdAnchor1);
        this._NgIf_2_6 = new import17.NgIf(this._appEl_2.vcRef, this._TemplateRef_2_5);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n', null);
        this._expr_0 = import12.UNINITIALIZED;
        this.init([], [
            this._el_0,
            this._text_1,
            this._anchor_2,
            this._text_3
        ], [], []);
        return null;
    };
    _View_MdAnchor0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import17.NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6;
        }
        return notFoundResult;
    };
    _View_MdAnchor0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0 = this.context.isRippleEnabled();
        if (import10.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this._NgIf_2_6.ngIf = currVal_0;
            this._expr_0 = currVal_0;
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_MdAnchor0;
}(import8.AppView));
export function viewFactory_MdAnchor0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdAnchor === null)) {
        (renderType_MdAnchor = viewUtils.createRenderComponentType('', 1, import14.ViewEncapsulation.None, styles_MdAnchor, {}));
    }
    return new _View_MdAnchor0(viewUtils, parentInjector, declarationEl);
}
var _View_MdAnchor1 = (function (_super) {
    __extends(_View_MdAnchor1, _super);
    function _View_MdAnchor1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdAnchor1, renderType_MdAnchor, import11.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import12.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdAnchor1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'md-button-ripple');
        this.renderer.setElementAttribute(this._el_0, 'md-ripple', '');
        this.renderer.setElementAttribute(this._el_0, 'md-ripple-background-color', 'rgba(0, 0, 0, 0)');
        this._MdRipple_0_3 = new import3.MdRipple(new import13.ElementRef(this._el_0));
        this._expr_0 = import12.UNINITIALIZED;
        this._expr_1 = import12.UNINITIALIZED;
        this._expr_2 = import12.UNINITIALIZED;
        this._expr_3 = import12.UNINITIALIZED;
        this._expr_4 = import12.UNINITIALIZED;
        this._expr_5 = import12.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return null;
    };
    _View_MdAnchor1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.MdRipple) && (0 === requestNodeIndex))) {
            return this._MdRipple_0_3;
        }
        return notFoundResult;
    };
    _View_MdAnchor1.prototype.detectChangesInternal = function (throwOnChange) {
        var changes = null;
        changes = null;
        var currVal_1 = this.parent.context.getHostElement();
        if (import10.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this._MdRipple_0_3.trigger = currVal_1;
            if ((changes === null)) {
                (changes = {});
            }
            changes['trigger'] = new import12.SimpleChange(this._expr_1, currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = (this.parent.context.isRoundButton() ? 'rgba(255, 255, 255, 0.2)' : '');
        if (import10.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this._MdRipple_0_3.color = currVal_2;
            if ((changes === null)) {
                (changes = {});
            }
            changes['color'] = new import12.SimpleChange(this._expr_2, currVal_2);
            this._expr_2 = currVal_2;
        }
        var currVal_3 = 'rgba(0, 0, 0, 0)';
        if (import10.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this._MdRipple_0_3.backgroundColor = currVal_3;
            if ((changes === null)) {
                (changes = {});
            }
            changes['backgroundColor'] = new import12.SimpleChange(this._expr_3, currVal_3);
            this._expr_3 = currVal_3;
        }
        if ((changes !== null)) {
            this._MdRipple_0_3.ngOnChanges(changes);
        }
        if (((this.numberOfChecks === 0) && !throwOnChange)) {
            this._MdRipple_0_3.ngOnInit();
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this.parent.context.isRoundButton();
        if (import10.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_0, 'md-button-ripple-round', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_4 = this._MdRipple_0_3.focused;
        if (import10.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementClass(this._el_0, 'md-ripple-focused', currVal_4);
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this._MdRipple_0_3.unbounded;
        if (import10.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setElementClass(this._el_0, 'md-ripple-unbounded', currVal_5);
            this._expr_5 = currVal_5;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_MdAnchor1.prototype.destroyInternal = function () {
        this._MdRipple_0_3.ngOnDestroy();
    };
    return _View_MdAnchor1;
}(import8.AppView));
function viewFactory_MdAnchor1(viewUtils, parentInjector, declarationEl) {
    return new _View_MdAnchor1(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/button/button.ngfactory.js.map