/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/card/card';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './card.css';
var MdCardModuleInjector = (function (_super) {
    __extends(MdCardModuleInjector, _super);
    function MdCardModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    MdCardModuleInjector.prototype.createInternal = function () {
        this._MdCardModule_0 = new import1.MdCardModule();
        return this._MdCardModule_0;
    };
    MdCardModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.MdCardModule)) {
            return this._MdCardModule_0;
        }
        return notFoundResult;
    };
    MdCardModuleInjector.prototype.destroyInternal = function () {
    };
    return MdCardModuleInjector;
}(import0.NgModuleInjector));
export var MdCardModuleNgFactory = new import0.NgModuleFactory(MdCardModuleInjector, import1.MdCardModule);
var renderType_MdCard_Host = null;
var _View_MdCard_Host0 = (function (_super) {
    __extends(_View_MdCard_Host0, _super);
    function _View_MdCard_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCard_Host0, renderType_MdCard_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdCard_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-card', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdCard0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdCard_0_4 = new import1.MdCard();
        this._appEl_0.initComponent(this._MdCard_0_4, [], compView_0);
        compView_0.create(this._MdCard_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdCard_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCard) && (0 === requestNodeIndex))) {
            return this._MdCard_0_4;
        }
        return notFoundResult;
    };
    return _View_MdCard_Host0;
}(import4.AppView));
function viewFactory_MdCard_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCard_Host === null)) {
        (renderType_MdCard_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdCard_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdCardNgFactory = new import10.ComponentFactory('md-card', viewFactory_MdCard_Host0, import1.MdCard);
var styles_MdCard = [import11.styles];
var renderType_MdCard = null;
var _View_MdCard0 = (function (_super) {
    __extends(_View_MdCard0, _super);
    function _View_MdCard0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCard0, renderType_MdCard, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckOnce);
    }
    _View_MdCard0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.renderer.projectNodes(parentRenderNode, import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init([], [this._text_0], [], []);
        return null;
    };
    return _View_MdCard0;
}(import4.AppView));
export function viewFactory_MdCard0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCard === null)) {
        (renderType_MdCard = viewUtils.createRenderComponentType('', 1, import9.ViewEncapsulation.None, styles_MdCard, {}));
    }
    return new _View_MdCard0(viewUtils, parentInjector, declarationEl);
}
var renderType_MdCardHeader_Host = null;
var _View_MdCardHeader_Host0 = (function (_super) {
    __extends(_View_MdCardHeader_Host0, _super);
    function _View_MdCardHeader_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCardHeader_Host0, renderType_MdCardHeader_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdCardHeader_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-card-header', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdCardHeader0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdCardHeader_0_4 = new import1.MdCardHeader();
        this._appEl_0.initComponent(this._MdCardHeader_0_4, [], compView_0);
        compView_0.create(this._MdCardHeader_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdCardHeader_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCardHeader) && (0 === requestNodeIndex))) {
            return this._MdCardHeader_0_4;
        }
        return notFoundResult;
    };
    return _View_MdCardHeader_Host0;
}(import4.AppView));
function viewFactory_MdCardHeader_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCardHeader_Host === null)) {
        (renderType_MdCardHeader_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdCardHeader_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdCardHeaderNgFactory = new import10.ComponentFactory('md-card-header', viewFactory_MdCardHeader_Host0, import1.MdCardHeader);
var styles_MdCardHeader = [];
var renderType_MdCardHeader = null;
var _View_MdCardHeader0 = (function (_super) {
    __extends(_View_MdCardHeader0, _super);
    function _View_MdCardHeader0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCardHeader0, renderType_MdCardHeader, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckOnce);
    }
    _View_MdCardHeader0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.renderer.projectNodes(parentRenderNode, import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_0 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_1 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'class', 'md-card-header-text');
        this._text_2 = this.renderer.createText(this._el_1, '\n  ', null);
        this.renderer.projectNodes(this._el_1, import6.flattenNestedViewRenderNodes(this.projectableNodes[1]));
        this._text_3 = this.renderer.createText(this._el_1, '\n', null);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this.renderer.projectNodes(parentRenderNode, import6.flattenNestedViewRenderNodes(this.projectableNodes[2]));
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init([], [
            this._text_0,
            this._el_1,
            this._text_2,
            this._text_3,
            this._text_4,
            this._text_5
        ], [], []);
        return null;
    };
    return _View_MdCardHeader0;
}(import4.AppView));
export function viewFactory_MdCardHeader0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCardHeader === null)) {
        (renderType_MdCardHeader = viewUtils.createRenderComponentType('', 3, import9.ViewEncapsulation.None, styles_MdCardHeader, {}));
    }
    return new _View_MdCardHeader0(viewUtils, parentInjector, declarationEl);
}
var renderType_MdCardTitleGroup_Host = null;
var _View_MdCardTitleGroup_Host0 = (function (_super) {
    __extends(_View_MdCardTitleGroup_Host0, _super);
    function _View_MdCardTitleGroup_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCardTitleGroup_Host0, renderType_MdCardTitleGroup_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckAlways);
    }
    _View_MdCardTitleGroup_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('md-card-title-group', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_MdCardTitleGroup0(this.viewUtils, this.injector(0), this._appEl_0);
        this._MdCardTitleGroup_0_4 = new import1.MdCardTitleGroup();
        this._appEl_0.initComponent(this._MdCardTitleGroup_0_4, [], compView_0);
        compView_0.create(this._MdCardTitleGroup_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_MdCardTitleGroup_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import1.MdCardTitleGroup) && (0 === requestNodeIndex))) {
            return this._MdCardTitleGroup_0_4;
        }
        return notFoundResult;
    };
    return _View_MdCardTitleGroup_Host0;
}(import4.AppView));
function viewFactory_MdCardTitleGroup_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCardTitleGroup_Host === null)) {
        (renderType_MdCardTitleGroup_Host = viewUtils.createRenderComponentType('', 0, import9.ViewEncapsulation.None, [], {}));
    }
    return new _View_MdCardTitleGroup_Host0(viewUtils, parentInjector, declarationEl);
}
export var MdCardTitleGroupNgFactory = new import10.ComponentFactory('md-card-title-group', viewFactory_MdCardTitleGroup_Host0, import1.MdCardTitleGroup);
var styles_MdCardTitleGroup = [];
var renderType_MdCardTitleGroup = null;
var _View_MdCardTitleGroup0 = (function (_super) {
    __extends(_View_MdCardTitleGroup0, _super);
    function _View_MdCardTitleGroup0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_MdCardTitleGroup0, renderType_MdCardTitleGroup, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import8.ChangeDetectorStatus.CheckOnce);
    }
    _View_MdCardTitleGroup0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this._text_1 = this.renderer.createText(this._el_0, '\n  ', null);
        this.renderer.projectNodes(this._el_0, import6.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this._text_2 = this.renderer.createText(this._el_0, '\n', null);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n', null);
        this.renderer.projectNodes(parentRenderNode, import6.flattenNestedViewRenderNodes(this.projectableNodes[1]));
        this._text_4 = this.renderer.createText(parentRenderNode, '\n', null);
        this.renderer.projectNodes(parentRenderNode, import6.flattenNestedViewRenderNodes(this.projectableNodes[2]));
        this._text_5 = this.renderer.createText(parentRenderNode, '\n', null);
        this.init([], [
            this._el_0,
            this._text_1,
            this._text_2,
            this._text_3,
            this._text_4,
            this._text_5
        ], [], []);
        return null;
    };
    return _View_MdCardTitleGroup0;
}(import4.AppView));
export function viewFactory_MdCardTitleGroup0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_MdCardTitleGroup === null)) {
        (renderType_MdCardTitleGroup = viewUtils.createRenderComponentType('', 3, import9.ViewEncapsulation.None, styles_MdCardTitleGroup, {}));
    }
    return new _View_MdCardTitleGroup0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=/Users/yuelindu/Projects/SitesRun/src/main/webapp/src/aot/node_modules/@angular/material/card/card.ngfactory.js.map